name: Scan CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Sonarqube_Static_Code_Analysis:
    runs-on: shoeshop
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  
          
      - name: SonarQube Scan 
        run: docker run --rm -v $PWD:/usr/src sonarsource/sonar-scanner-cli:latest sonar-scanner -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.token=${{secrets.SONAR_TOKEN}} -Dsonar.projectKey=${{secrets.SONAR_PROJECTKEY}}

  Snyk_Composition_Analysis:
    runs-on: ubuntu-latest

    env:
      REPORT_NAME: shoeshop_fe_snyk_report
      SNYK_IMAGE_NAME: snyk_scan_image
      SNYK_CONTAINER_NAME: snyk_scan

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image with Snyk scan
      run: |
        docker build --rm --build-arg SNYK_AUTH_TOKEN=${{ secrets.SNYK_TOKEN }} --build-arg OUTPUT_FILENAME=$REPORT_NAME -t $SNYK_IMAGE_NAME -f Dockerfile-snyk .

    - name: Run Docker container to perform Snyk scan
      run: docker run --name $SNYK_CONTAINER_NAME $SNYK_IMAGE_NAME

    - name: Copy Snyk HTML report from Docker container
      run: docker cp $SNYK_CONTAINER_NAME:/app/$REPORT_NAME.html ./$REPORT_NAME.html

    - name: Upload Snyk HTML report as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: shoeshop_fe-snyk-report
        path: ./$REPORT_NAME.html

    - name: Clean up Docker resources
      run: |
        docker rm -f $SNYK_CONTAINER_NAME || true
        docker rmi -f $SNYK_IMAGE_NAME || true

  Trivy_Image_Scan:
    runs-on: ubuntu-latest

    env:
      REPORT_NAME: shoeshop_fe_trivy_report.html
      IMAGE_NAME: shoeshop_fe:v1

    steps:
    - uses: actions/checkout@v4

    - name: Docker build image
      run: docker build --build-arg REACT_APP_BASE_URL=${{secrets.BE_API}} -t $IMAGE_NAME .

    - name: Trivy scan image
      run: |
        docker run --rm -v $PWD:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --download-db-only
        docker run --rm -v $PWD:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /shoeshop_fe/$REPORT_NAME $IMAGE_NAME
    
    - name: Upload Trivy image scan HTML report as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: shoeshop_fe_trivy_report
        path: $REPORT_NAME

    - name: Clean up Docker resources
      run: docker rmi -f $IMAGE_NAME || true


  Push_Image_Internal:
    runs-on: shoeshop

#    env: 
#      IMAGE_NAME: ${{ secrets.DOCKERHUB_USER }}/shoeshop_fe:v1

    steps: 
    - name: Checkout source code
      uses: actions/checkout@v4

#    - name: Docker build image
#      run: docker build -t $IMAGE_NAME .

#    - name: Log in to Docker Hub
#      run: echo "${{ secrets.DOCKERHUB_PASS }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin

#    - name: Push Docker image
#      run: docker push $IMAGE_NAME

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY}}
        IMAGE_TAG: 'latest'
      run: |
        docker build --build-arg REACT_APP_BASE_URL=${{secrets.BE_API}} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  
