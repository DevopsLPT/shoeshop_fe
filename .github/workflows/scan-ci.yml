name: Scan CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  Get_Credentials:
    runs-on: build
    outputs:
      DOCKER_REGISTRY_USER: ${{ steps.get-docker-credentials.outputs.DOCKER_REGISTRY_USER }}
      DOCKER_REGISTRY_PASS: ${{ steps.get-docker-credentials.outputs.DOCKER_REGISTRY_PASS }}
      DOCKER_REGISTRY: ${{ steps.get-docker-credentials.outputs.DOCKER_REGISTRY }}
      DOCKER_REPO: ${{ steps.get-docker-credentials.outputs.DOCKER_REPO }}
      IMAGE_TAG: latest

      JFROG_USER: ${{ steps.get-jfrog-credentials.outputs.JFROG_USER }}
      JFROG_PASS: ${{ steps.get-jfrog-credentials.outputs.JFROG_PASS }}
      JFROG_PATH: ${{ steps.get-jfrog-credentials.outputs.JFROG_PATH }}

      SONAR_PROJECTKEY: ${{ steps.get-tokens.outputs.SONAR_PROJECTKEY }}
      SONAR_TOKEN: ${{ steps.get-tokens.outputs.SONAR_TOKEN }}
      SONAR_HOST: ${{ steps.get-tokens.outputs.SONAR_HOST }}
      BE_API: ${{ steps.get-tokens.outputs.BE_API }}

    steps:
      - name: Get Docker Registry Credentials
        id: get-docker-credentials
        run: |
          SECRETS=$(curl -s --header "X-Vault-Token: ${{secrets.VAULT_TOKEN}}" --request GET ${{secrets.DOCKER_REGISTRY_CREDENTIAL_PATH}} | jq -r '.data.data')
          echo "DOCKER_REGISTRY_USER=$(echo $SECRETS | jq -r '.user')" >> $GITHUB_OUTPUT
          echo "DOCKER_REGISTRY_PASS=$(echo $SECRETS | jq -r '.pass')" >> $GITHUB_OUTPUT
          echo "DOCKER_REGISTRY=$(echo $SECRETS | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "DOCKER_REPO=$(echo $SECRETS | jq -r '.fe_repo')" >> $GITHUB_OUTPUT

      - name: Get JFrog Credentials
        id: get-jfrog-credentials
        run: |
          SECRETS=$(curl -s --header "X-Vault-Token: ${{secrets.VAULT_TOKEN}}" --request GET ${{secrets.JFROG_CREDENTIAL_PATH}} | jq -r '.data.data')
          echo "JFROG_USER=$(echo $SECRETS | jq -r '.user')" >> $GITHUB_OUTPUT
          echo "JFROG_PASS=$(echo $SECRETS | jq -r '.pass')" >> $GITHUB_OUTPUT
          echo "JFROG_PATH=$(echo $SECRETS | jq -r '.path')" >> $GITHUB_OUTPUT

      - name: Get Tokens and keys
        id: get-tokens
        run: |
          SECRETS=$(curl -s --header "X-Vault-Token: ${{secrets.VAULT_TOKEN}}" --request GET ${{secrets.TOKENS_CREDENTIAL_PATH}} | jq -r '.data.data')
          echo "SONAR_PROJECTKEY=$(echo $SECRETS | jq -r '.projectKey')" >> $GITHUB_OUTPUT
          echo "SONAR_TOKEN=$(echo $SECRETS | jq -r '.token')" >> $GITHUB_OUTPUT
          echo "SONAR_HOST=$(echo $SECRETS | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "BE_API=$(echo $SECRETS | jq -r '.be_api')" >> $GITHUB_OUTPUT


  Sonarqube_Static_Code_Analysis:
    runs-on: ubuntu-latest
    needs: Get_Credentials
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Set env
        run: |
          echo "DOCKER_IMAGE=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}/${{needs.Get_Credentials.outputs.DOCKER_REPO}}:${{needs.Get_Credentials.outputs.IMAGE_TAG}}" >> $GITHUB_ENV

          echo "SONAR_HOST=${{needs.Get_Credentials.outputs.SONAR_HOST}}" >> $GITHUB_ENV

          echo "SONAR_TOKEN=${{needs.Get_Credentials.outputs.SONAR_TOKEN}}" >> $GITHUB_ENV

          echo "SONAR_PROJECTKEY=${{needs.Get_Credentials.outputs.SONAR_PROJECTKEY}}" >> $GITHUB_ENV

      - name: SonarQube Scan 
        run: docker run --rm -v $GITHUB_WORKSPACE:/usr/src sonarsource/sonar-scanner-cli:latest sonar-scanner -Dsonar.host.url=${{env.SONAR_HOST}} -Dsonar.token=${{env.SONAR_TOKEN}} -Dsonar.projectKey=${{env.SONAR_PROJECTKEY}}

  Build_Docker_Image:
    runs-on: build
    needs: Get_Credentials
    steps:
    - name: Set env
      run: |
        echo "DOCKER_IMAGE=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}/${{needs.Get_Credentials.outputs.DOCKER_REPO}}:${{needs.Get_Credentials.outputs.IMAGE_TAG}}" >> $GITHUB_ENV

        echo "BE_API=${{needs.Get_Credentials.outputs.BE_API}}" >> $GITHUB_ENV

    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Docker build image
      run: docker build --build-arg REACT_APP_BASE_URL=${{env.BE_API}} -t ${{env.DOCKER_IMAGE}} .

  Trivy_Image_Scan:
    runs-on: build
    needs: [Build_Docker_Image, Get_Credentials]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set env
        run: |
          echo "DOCKER_IMAGE=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}/${{needs.Get_Credentials.outputs.DOCKER_REPO}}:${{needs.Get_Credentials.outputs.IMAGE_TAG}}" >> $GITHUB_ENV

          echo "REPORT_NAME=shoeshop_fe_trivy_report_$(date +'%Y%m%d')" >> $GITHUB_ENV

          echo "JFROG_USER=${{needs.Get_Credentials.outputs.JFROG_USER}}" >> $GITHUB_ENV

          echo "JFROG_PASS=${{needs.Get_Credentials.outputs.JFROG_PASS}}" >> $GITHUB_ENV

          echo "JFROG_PATH=${{needs.Get_Credentials.outputs.JFROG_PATH}}" >> $GITHUB_ENV

      - name: Trivy scan image
        run: |
          docker run --rm -v $GITHUB_WORKSPACE:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --download-db-only

          docker run --rm -v $GITHUB_WORKSPACE:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /shoeshop_fe/${{env.REPORT_NAME}}.html ${{env.DOCKER_IMAGE}}
    
      - name: Upload Trivy image scan HTML report as an artifact to GIthub
        uses: actions/upload-artifact@v4
        with:
          name: shoeshop_fe_trivy_report
          path: $GITHUB_WORKSPACE/${{ env.REPORT_NAME }}.html
      
      - name: Upload Trivy image scan HTML report as an artifact to JFrog
        run: curl -X PUT -u ${{env.JFROG_USER}}:${{env.JFROG_PASS}} -T $GITHUB_WORKSPACE/${{ env.REPORT_NAME }}.html ${{env.JFROG_PATH}}/${{ env.REPORT_NAME }}.html

  Push_Image_Internal:
    runs-on: build  
    needs: [Trivy_Image_Scan, Get_Credentials]
    steps:
      - name: Set env
        run: |
          echo "DOCKER_IMAGE=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}/${{needs.Get_Credentials.outputs.DOCKER_REPO}}:${{needs.Get_Credentials.outputs.IMAGE_TAG}}" >> $GITHUB_ENV

          echo "DOCKER_REGISTRY_USER=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY_USER}}" >> $GITHUB_ENV

          echo "DOCKER_REGISTRY_PASS=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY_PASS}}" >> $GITHUB_ENV

          echo "DOCKER_REGISTRY=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}" >> $GITHUB_ENV

      - name: Log in to Docker Registry
        run: echo "${{env.DOCKER_REGISTRY_PASS}}" | docker login ${{env.DOCKER_REGISTRY}} -u "${{env.DOCKER_REGISTRY_USER}}" --password-stdin

      - name: Push Docker image
        run: docker push ${{env.DOCKER_IMAGE}}

  Clean_Up:
    runs-on: build
    needs: [Push_Image_Internal, Get_Credentials]
    steps:
      - name: Set env
        run: |
          echo "DOCKER_IMAGE=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}/${{needs.Get_Credentials.outputs.DOCKER_REPO}}:${{needs.Get_Credentials.outputs.IMAGE_TAG}}" >> $GITHUB_ENV
                    
          echo "DOCKER_REGISTRY=${{needs.Get_Credentials.outputs.DOCKER_REGISTRY}}" >> $GITHUB_ENV

      - name: Cleanup Trivy DB
        run: rm -rf ~/.cache/trivy

      - name: Log out from Docker Registry
        run: docker logout ${{env.DOCKER_REGISTRY}} || true

      - name: Remove Docker Image
        run: docker rmi -f ${{env.DOCKER_IMAGE}} || true

      - name: Clean up workspace
        if: always()
        run: rm -rf $GITHUB_WORKSPACE || true