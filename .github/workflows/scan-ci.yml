name: Scan CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Sonarqube_Static_Code_Analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  
          
      - name: SonarQube Scan 
        run: docker run --rm -v $GITHUB_WORKSPACE:/usr/src sonarsource/sonar-scanner-cli:latest sonar-scanner -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.token=${{secrets.SONAR_TOKEN}} -Dsonar.projectKey=${{secrets.SONAR_PROJECTKEY}}

  Build_Docker_Image:
    runs-on: build
    env: 
      IMAGE_TAG: latest
      IMAGE_NAME: ${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_REPO}}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Docker build image
      run: docker build --build-arg REACT_APP_BASE_URL=${{secrets.BE_API}} -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} .

  Trivy_Image_Scan:
    runs-on: build
    needs: Build_Docker_Image
    env:
      REPORT_NAME: shoeshop_fe_trivy_report_$(date +'%Y%m%d')
      IMAGE_TAG: latest
      IMAGE_NAME: ${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_REPO}}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Trivy scan image
        run: |
          docker run --rm -v $GITHUB_WORKSPACE:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --download-db-only
          docker run --rm -v $GITHUB_WORKSPACE:/shoeshop_fe -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /shoeshop_fe/${{env.REPORT_NAME}}.html ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
    
      - name: Upload Trivy image scan HTML report as an artifact to GIthub
        uses: actions/upload-artifact@v4
        with:
          name: shoeshop_fe_trivy_report
          path: $GITHUB_WORKSPACE/${{ env.REPORT_NAME }}.html
      
      - name: Upload Trivy image scan HTML report as an artifact to JFrog
        run: curl -X PUT -u ${{secrets.JFROG_USER}}:${{secrets.JFROG_PASSWORD}} -T $GITHUB_WORKSPACE/${{ env.REPORT_NAME }}.html ${{secrets.JFROG_PATH}}/${{ env.REPORT_NAME }}.html

  Push_Image_Internal:
    runs-on: build
    needs: Trivy_Image_Scan
    env:
      IMAGE_TAG: latest
      IMAGE_NAME: ${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_REPO}}
    steps:
      - name: Get Docker Registry Credential
        run: |
          SECRETS=$(curl -s --header "X-Vault-Token: ${{secrets.VAULT_TOKEN}}" --request GET ${{secrets.CREADENTIAL_PATH}} | jq -r '.data.data')
          echo "REGISTRY_USER=$(echo $SECRETS | jq -r '.user')" >> $GITHUB_ENV
          echo "REGISTRY_PASS=$(echo $SECRETS | jq -r '.pass')" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=$(echo $SECRETS | jq -r '.url')" >> $GITHUB_ENV

      - name: Log in to Docker Registry
        run: echo "${{env.REGISTRY_PASS}}" | docker login ${{env.DOCKER_REGISTRY} -u "${{env.REGISTRY_USER}}" --password-stdin

      - name: Push Docker image
        run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

  Clean_Up:
    runs-on: build
    needs: Push_Image_Internal
    env:
      IMAGE_TAG: latest
      IMAGE_NAME: ${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_REPO}}
    steps:
      - name: Cleanup Trivy DB
        run: rm -rf ~/.cache/trivy

      - name: Log out from Docker Registry
        run: docker logout ${{secrets.DOCKER_REGISTRY}} || true

      - name: Remove Docker Image
        run: docker rmi -f ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} || true

      - name: Clean up workspace
        if: always()
        run: rm -rf $GITHUB_WORKSPACE || true